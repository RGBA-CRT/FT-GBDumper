Const FT_EPROM_VPP_PIN = 4
Const FT_EPROM_RST_PIN = 5
Const FT_EPROM_ENABLE_PIN = 6
Const FT_EPROM_READ_ENABLE_PIN = 7
Const FT_EPROM_WRITE = &HFF
Const FT_EPROM_READ = &H00

Enum FT_EPROM_IO
	FTE_INPUT
	FTE_OUTPUT
End Enum

Class FT232H_PPROM_BASE
Protected 
	dummy AS DWord
	Address AS DWord
	Data AS DWord
	dir AS FT_EPROM_IO
	ft AS *FT232H
	mcp As *FT232H_MCP23017
	bRomEnalbe AS BOOL
	bReadEnable AS BOOL
	bWriteEnable AS BOOL

Public
	Sub init(ftc AS *FT232H)
		ft=ftc

		ft->gpio->setACBusDir(&HFF)
		ft->gpio->setADBusDir(&HF0)
		mcp=new FT232H_MCP23017(ft,3,60)

		mcp->SetPort(&H0000,&H0000)
		SetLatch(0)
		
		bRomEnalbe=FALSE
		bReadEnable=FALSE
		bWriteEnable=TRUE

		ROMEnable(TRUE)
		ReadEnable(TRUE)
		WriteEnable(FALSE)
		
		'RST
		ft->gpio->setADBusBit(FT_EPROM_RST_PIN,1)

		mcp->SetPortValWord(0)

		Address=0
		dir=FTE_OUTPUT
		SetDatabusDirection(FTE_INPUT)

		ft->flush()		
	End Sub

	Sub ROMEnable(ef AS BOOL)
		if bRomEnalbe <> ef Then 
			ft->gpio->setADBusBit(FT_EPROM_ENABLE_PIN,not(ef) AND &H01)
			bRomEnalbe=ef
		End If
	End Sub

	Sub ReadEnable(ef AS BOOL)
		if bReadEnable <> ef Then
			if ef=TRUE Then
				SetDatabusDirection(FTE_INPUT)
				ft->gpio->setADBusBit(FT_EPROM_READ_ENABLE_PIN,not(ef) AND &H01)
			Else
				ft->gpio->setADBusBit(FT_EPROM_READ_ENABLE_PIN,not(ef) AND &H01)
				SetDatabusDirection(FTE_OUTPUT)
			End If
			bReadEnable=ef
		End If
	End Sub

	Sub SetAddress(adr AS DWord)(forceLatch As BOOL)
		'変更の必要がある時だけLATCH 
		if (adr xor Address) >> 16 or forceLatch Then
			SetLatch(adr>>16)
		End If

		if (((adr xor Address) >> 8) And &HFF) or forceLatch Then
			mcp->SetPortValWord(adr AS Word)
		Else
			mcp->SetPortValA(adr AS Word)
		End If

		Address=adr
	End Sub

	Sub SetData(data AS Byte)
		SetDatabusDirection(FTE_OUTPUT)
		ft->gpio->setACBus(data AS Byte)
	End Sub

	Sub ReadDataRequest()
		SetDatabusDirection(FTE_INPUT)
		
		ReadEnable(TRUE)
		ft->gpio->ACBusReadRequest()
		ReadEnable(FALSE)
	End Sub

	Sub AreaReadRequest(adr AS DWord,length As DWord)(bRD_pulse AS BOOL, deepRead AS BOOL)
		Dim i aS DWord
		SetDatabusDirection(FTE_INPUT)
	'	bRD_pulse=TRUE

		if bRD_pulse Then 
			ReadEnable(FALSE)
		Else
			ReadEnable(TRUE)
		End If
	'	ft->addCommand(ex"¥x8F¥x05¥x00",3)				'Wait 13us 別になくてもいいことが判明

		Do
			SetAddress(adr+i)
			if bRD_pulse Then 
				ft->clockWithNoData(0)
				ReadEnable(TRUE)
				ft->clockWithNoData(7) '通常ROM
'				ft->clockWithNoData(4) '通常ROM
'				ft->clockWithNoData(15) 'NP安定
				' 0=8clock = 133.3ns
			endif
	
			ft->gpio->ACBusReadRequest()
			if deepRead Then
				ft->clockWithNoData(15)
				ft->gpio->ACBusReadRequest()
				ft->clockWithNoData(15)
				ft->gpio->ACBusReadRequest()
				ft->clockWithNoData(15)
				ft->gpio->ACBusReadRequest()
				ft->clockWithNoData(15)
				ft->gpio->ACBusReadRequest()
			Endif
			
			if bRD_pulse Then ReadEnable(FALSE)				'確実にいる
			i++
			if length<=i Then ExitDo

		Loop
	End Sub

	Sub WriteEnable(ef AS BOOL)
		if bWriteEnable <> ef Then
			if ef=FALSE Then
				SetDatabusDirection(FTE_INPUT)
				ft->gpio->setADBusBit(FT_EPROM_VPP_PIN,not(ef) AND &H01)
			Else
				ft->gpio->setADBusBit(FT_EPROM_VPP_PIN,not(ef) AND &H01)
				SetDatabusDirection(FTE_OUTPUT)
			End If
			bWriteEnable=ef
		End If
	End Sub	

	Function FT_SendCommands() AS BOOL
		FT_SendCommands = ft->sendCommands()
	End Function

	Function FT_ReceiveData(data AS BytePtr,length AS DWord) AS BOOL
		FT_ReceiveData = ft->reciveData(data,length)
	End Function
	
	Virtual Sub WriteByte(data AS Byte)

protected

	Sub SetLatch(val AS Byte)
		ft->gpio->setADBusBit(FT_EPROM_RST_PIN,1)		'LATCH START
		mcp->SetPortValA(val)							'LATCH SET
		ft->addCommand(ex"¥x9c¥x39¥x00",3)				'Wait 13us
		mcp->SetPortValA(val)							'LATCH SET
		ft->gpio->setADBusBit(FT_EPROM_RST_PIN,0)		'LATCH HOLD
	End Sub
	
	Sub SetDatabusDirection(idr AS FT_EPROM_IO)
		if dir=idr Then  ExitSub
		dir=idr
		if idr=FTE_INPUT Then
			ft->gpio->setACBusDir(FT_EPROM_READ)
		Else
			ft->gpio->setACBusDir(FT_EPROM_WRITE)
		End If
	End Sub
End Class

Class FT232H_DMGROM : Inherits FT232H_PPROM_BASE
Public
	Sub FT232H_DMGROM(ftc AS *FT232H)
		init(ftc)
	End Sub

	Function AreaWirte(adr AS DWord,buffer AS BytePtr,length AS DWord) AS BOOL
		Dim i AS DWord,checkBuf AS BytePtr,tmp AS DWord

		ft->flush()

		For i=0 To length-1
			SetAddress(adr+i,TRUE)

			WriteByte(buffer[i])

			if i Mod &H10=0 Then ft->sendCommands()
		Next i
		
		ft->addCommand(ex"¥x9c¥xa0¥x00",3)	'wait 55us 0x0080

		AreaWirte=TRUE '戻り値：OK

		'書き込みチェック
		checkBuf = calloc(length+5)
		AreaReadRequest(adr,length)
		ft->sendCommands()
		ft->reciveData(checkBuf,length)

		For i=0 To length-1
			if buffer[i] <> checkBuf[i] Then
				AreaWirte=FALSE	'戻り値:NG
				ExitFor
			End If
		Next i

		free(checkBuf)
	End Function
	
	'このルーチンには一切のムダがないのでいじらないこと（20190905現ざう）
	Sub WriteByte(data AS Byte)
		ReadEnable(FALSE)
		
		SetData(data)	'SET WRITE DATA
		WriteEnable(TRUE)
		ft->clockWithNoData(0)

		WriteEnable(FALSE)
		ft->clockWithNoData(0)
	End Sub
	
Private
	
End Class


