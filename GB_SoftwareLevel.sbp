'-----------------
' Software Level
'-----------------

Const DMG_HEADER_ADDRESS = &H0100
Const DMG_ADDRESS_BANK0 = &H0000
Const DMG_ADDRESS_BANKn = &H4000
const DMG_BANK_SIZE = 16*1024
Const MBC_ADR_ROM_BANK_NUMBER = &H2000
Const MBC_ADR_ROM_BANK_NUMBER_HIBYTE = &H3000

Type Align(1) DMG_ROM_HEADER 
	EntryPoint AS DWord	'0100h
	NLogo[47] AS Byte	'0104h
	Title[14] AS Byte	'0134h
	GBCFlag AS Byte		'0143h
	MakerCode AS Word	'0144h
	SGBFlag AS Byte		'146
	CartType AS Byte		
	RomSize AS Byte
	SramSize AS Byte
	RegionCode AS Byte
	MakerCode_old AS Byte
	RomVersion AS Byte
	HeaderComplement As Byte
	CheckSum AS Word
End Type

'Headerをわかりやすくした奴
Type DMG_ROM_INFO
	raw AS DMG_ROM_HEADER
	bLogoCheck AS BOOL
	Title[15] AS Byte
	GameCode[4] AS Byte	'文字列扱い(Null終端)
	ConsoleFlag AS Long
	MBCType AS DMG_MBC_TYPE
	RomSize AS DWord
	SramSize AS DWord
	RomVersion As DWord
End Type

Const DMG_NLOGO_SUM = &H1546

Enum DMG_CONSOLE_FLAG
	DMG_CF_NGB = &H01
	DMG_CF_SGB = &H02
	DMG_CF_GBC = &H04
End Enum

Enum DMG_MBC_TYPE
	DMG_NO_MBC = 0
	DMG_MBC1
	DMG_MBC2
	DMG_MBC3
	DMG_MBC4
	DMG_MBC5
	DMG_MBC6
	DMG_MBC7
	DMG_MMM01
	DMG_POCKET_CAMERA
	DMG_TAMA5
	DMG_HuC3
	DMG_HuC1
	DMG_GMMC1
	DMG_MBC_TYPE_MAX
	DMG_MBC_TYPE_UNKNOWN
End Enum

Dim DMG_MBC_TYPE_STR[DMG_MBC_TYPE_MAX+1] = [
	"DMG_NO_MBC",
	"DMG_MBC1",
	"DMG_MBC2",
	"DMG_MBC3",
	"DMG_MBC4",
	"DMG_MBC5",
	"DMG_MBC6",
	"DMG_MBC7",
	"DMG_MMM01",
	"DMG_POCKET_CAMERA",
	"DMG_TAMA5",
	"DMG_HuC3",
	"DMG_HuC1",
	"DMG_G-MMC1(MX15002)",
	"MBC BUG",
	"MBC Unknown"
] AS BytePtr

Const MBC_ADR_SRAM_BANK_NUMBER = &H4000
Const MBC_ADR_SRAM_ENABLE = &H0000
Const MBC1_ADR_MODE_SELECT = &H6000

'-------------------------
' Top Level Functions
'-------------------------

Function DumpFullRomToFile(fe AS *FT232H_DMGROM,filename AS BytePtr,ByRef info AS DMG_ROM_INFO) AS BOOL

	Dim buf AS BytePtr,lt As DWord, retry AS DWord

*DFRTF_DUMP_START
	lt=GetTickCount()
	buf=RomDumpFull(fe,VarPtr(info))
	lt=GetTickCount() - lt
	printf(ex"\nProcess Time : %dms %ds\n",lt,lt/1000)

	Dim actualSum As DWord
	actualSum = DMG_CalcSum(buf,info.RomSize)
	printf(ex"Checksum: \n [Actual] 0x%04X\n [Header] 0x%04X ... ",actualSum,info.raw.CheckSum)
	if actualSum = info.raw.CheckSum Then
		colorPrint(PH_SUCCESS, ex"[ OK ]\n")
	Else
		colorPrint(PH_ERROR, ex"[ NG ]\n")
		if info.MBCType=DMG_GMMC1 And retry=0 Then 
			printf(ex"NP RETRY...\n\n")
			retry++
			Goto *DFRTF_DUMP_START
		End If
	End If


	Dim fout AS File
	fout.openFile(filename,GENERIC_WRITE)
	fout.write(buf,info.RomSize)
	fout.close()

	free(buf): buf=NULL

End Function

Function DumpSramToFile(fe AS *FT232H_DMGROM,filename AS BytePtr,ByRef info AS DMG_ROM_INFO) AS BOOL

	Dim fout AS File
	if fout.openFile(filename,GENERIC_WRITE)=FALSE Then
		printf(ex"File open error : %s\n",filename)
		exitfunction
	End If

	Dim buf AS BytePtr
	buf=SramDumpFull(fe,VarPtr(info))

	if info.MBCType=DMG_MBC2 Then
		info.SramSize=512
	End If


	fout.write(buf,info.SramSize)
	fout.close()

	free(buf): buf=NULL
	DumpSramToFile=TRUE

End Function


Function WriteSramToFile(fe AS *FT232H_DMGROM,filename AS BytePtr,ByRef info AS DMG_ROM_INFO) AS BOOL

	Dim buf AS BytePtr
	Dim fout AS File
	if fout.openFile(filename,GENERIC_READ)=FALSE Then
		printf(ex"File open error : %s\n",filename)
		exitfunction
	End If

	if info.SramSize < DMG_SRAM_BANK_SIZE Then
		buf=calloc(DMG_SRAM_BANK_SIZE)
	Else
		buf=calloc(info.SramSize)
	End If

	fout.read(buf,info.SramSize)
	fout.close()

	SramWrite(fe,buf,VarPtr(info))

	free(buf): buf=NULL

End Function


'-------------------------
' High Level Functions
'-------------------------

Function RomDumpFull(fe As *FT232H_DMGROM,info AS *DMG_ROM_INFO) As BytePtr
	dim bRD_Pulse AS BOOL
	if info->MBCType= DMG_GMMC1 Then	bRD_Pulse=TRUE:printf(ex"[NintendoPower] RD Pulse Enabled\n")

	Dim buf AS BytePtr
	buf = calloc(info->RomSize)

	DMG_ReadCart(fe,buf,DMG_ADDRESS_BANK0,DMG_BANK_SIZE,bRD_Pulse)
	
	printf(ex"\n")

	dim i AS Long,bankCount As Long,lt AS DWord
	bankCount=info->RomSize / DMG_BANK_SIZE -1
	lt=GetTickCount()
	For i=1 To bankCount
		printf(ex"[DumpROM] Bank:%02X/%02X %d%% ::: %dkb/s         \r",i,bankCount,i/bankCount*100, ((i*DMG_BANK_SIZE)/(GetTickCount()-lt)) As DWord)

		MBC_RomBankSet(fe,info->MBCType,i)
		DMG_ReadCart(fe,buf + i*DMG_BANK_SIZE,DMG_ADDRESS_BANKn,DMG_BANK_SIZE,bRD_Pulse)

		if CheckCancel() Then ExitFor
	Next
	RomDumpFull=buf
	
	printf(ex"\n")
End Function

Const DMG_SRAM_BANK_SIZE = &H2000
Const DMG_SRAM_ADDRESS   = &HA000
Function SramDumpFull(fe As *FT232H_DMGROM,info AS *DMG_ROM_INFO) As BytePtr
	Dim buf AS BytePtr
	if info->SramSize > DMG_SRAM_BANK_SIZE Then
		buf = calloc(info->SramSize)
	Else
		buf = calloc(DMG_SRAM_BANK_SIZE)
	End If

	MBC_RamEnable(fe,info->MBCType,TRUE)

	printf(ex"\n")

	dim i AS Long,bankCount As Long
	bankCount=Abs(info->SramSize / DMG_SRAM_BANK_SIZE-1)
	For i=0 To bankCount
		printf(ex"[DumpSRAM] Bank:%02X/%02X %d%%  \r",i,bankCount,i/bankCount*100)
		MBC_SramBankSet(fe,info->MBCType,i)
		DMG_ReadCart(fe,buf + i*DMG_SRAM_BANK_SIZE,DMG_SRAM_ADDRESS,DMG_SRAM_BANK_SIZE,TRUE)

		if CheckCancel() Then ExitFor
	Next

	MBC_RamEnable(fe,info->MBCType,FALSE)

	if info->MBCType=DMG_MBC2 Then
	'	DMG_MBC2_SRAM_4to8(buf)
	End If

	SramDumpFull=buf

	printf(ex"\n")
End Function

Function SramWrite(fe As *FT232H_DMGROM, buf AS BytePtr,info AS *DMG_ROM_INFO)
	MBC_RamEnable(fe,info->MBCType,TRUE)

	printf(ex"\n")

	dim i AS Long,bankCount As Long
	bankCount=Abs(info->SramSize / DMG_SRAM_BANK_SIZE-1)
	For i=0 To bankCount
		printf(ex"[WriteSRAM] Bank:%02X/%02X %d%%   \r",i,bankCount,i/bankCount*100)
		MBC_SramBankSet(fe,info->MBCType,i)
		DMG_WriteCart(fe,buf + i*DMG_SRAM_BANK_SIZE,DMG_SRAM_ADDRESS,DMG_SRAM_BANK_SIZE)

		if CheckCancel() Then ExitFor
	Next

	MBC_RamEnable(fe,info->MBCType,FALSE)

	printf(ex"\n")
	
End Function

'-----------------------------
' Memory Bank Controller util
'-----------------------------

'4000h-7FFFhのROMバンクをセットする
Sub MBC_RomBankSet(fe As *FT232H_DMGROM, mbc AS Long, bankNum AS Long)

	if mbc=DMG_MBC2 or mbc=DMG_GMMC1 Then
		MBC_RegisterWrite(fe, &H2100, bankNum)
	Else
		MBC_RegisterWrite(fe, MBC_ADR_ROM_BANK_NUMBER, bankNum)
	End If

'	printf("[MBC][%x]",bankNum And &HFF)
	
	if (mbc >= DMG_MBC5) And (mbc <= DMG_MBC7)  Then
		MBC_RegisterWrite(fe, MBC_ADR_ROM_BANK_NUMBER_HIBYTE, (bankNum>>8))
'		printf("[MBC5 HIBYTE SET][%x]",bankNum>>8)
	Endif
End Sub


'A000h-BFFFhのSRAMバンクをセットする
Sub MBC_SramBankSet(fe As *FT232H_DMGROM, mbc AS Long, bankNum AS Long)
	if mbc<>DMG_MBC2 Then
		MBC_RegisterWrite(fe, MBC_ADR_SRAM_BANK_NUMBER, bankNum)
	End If
	printf("[MBC][SRAM][%x]",bankNum And &HFF)
End Sub

Sub MBC_RamEnable(fe As *FT232H_DMGROM, mbc AS Long, ef AS BOOL)
	if mbc=DMG_MBC1 or mbc=DMG_HuC1 Then
		if ef Then		
			MBC_RegisterWrite(fe, MBC1_ADR_MODE_SELECT, &H01)'RAM Banking Mode
			printf("[MBC1][SRAM_BANKING_MODE]")
		Else
			MBC_RegisterWrite(fe, MBC1_ADR_MODE_SELECT, &H00)'ROM Banking Mode
			printf("[MBC1][ROM_BANKING_MODE]")
		End If
	End If

	if ef Then
		MBC_RegisterWrite(fe, MBC_ADR_SRAM_ENABLE, &H0A) 'read/write Enable
	Else
		MBC_RegisterWrite(fe, MBC_ADR_SRAM_ENABLE, &H00) 'read/write Enable
	End If


End Sub

Const MBC2_SRAM_SIZE = 512
Sub DMG_MBC2_SRAM_4to8(buf AS BytePtr)
	Dim tmp AS BytePtr
	tmp=calloc(MBC2_SRAM_SIZE)
	memcpy(tmp,buf,MBC2_SRAM_SIZE)

	dim i AS Long
	For i=0 To MBC2_SRAM_SIZE/2
		buf[i] = (tmp[i*2] And &H0F) or ((tmp[i+2] And &H0F)<<4 )
	Next i
End Sub



'参考
'https://github.com/n13i/writeboy/blob/master/WriteBoy/cart_type.ino
'https://forums.nesdev.com/viewtopic.php?f=12&t=11453&start=147
Function GBMC_MapEntire(fe AS *FT232H_DMGROM) AS BOOL
	'G-MMC Opreation Mode
	GBMC_RegisterWrite(fe, &H0120, &H09)
	GBMC_RegisterWrite(fe, &H0121, &Haa)
	GBMC_RegisterWrite(fe, &H0122, &H55)
	GBMC_RegisterWrite(fe, &H013f, &Ha5)

	'05h = Map "MENU PROGRAM", 04h = カセット全体をマップ
	GBMC_RegisterWrite(fe, &H0120, &H04)
	GBMC_RegisterWrite(fe, &H013f, &Ha5)
/*
	GBMC_RegisterWrite(fe, &H0120, &H10)
	GBMC_RegisterWrite(fe, &H013f, &Ha5)
*/
	'0xA5
	if FT232H_ReadByte(fe,&H013f) = &HA5 Then
		GBMC_MapEntire=TRUE
	Else
		GBMC_MapEntire=FALSE
	End If

	'G-MMC Operation Mode End
	GBMC_RegisterWrite(fe, &H0120, &H08)
	GBMC_RegisterWrite(fe, &H013f, &Ha5)

End Function


'-----------------------
' ROM HEADER UTILs
'-----------------------

'GBのROMヘッダ取得
Sub DMG_GetHeader(fe As *FT232H_DMGROM,header AS *DMG_ROM_HEADER)
	DMG_ReadCart(fe,header,DMG_HEADER_ADDRESS,sizeof(DMG_ROM_HEADER))
End Sub

'生のheaderからinfoを作成
Sub DMG_rawHeaderToInfo(ByRef rawHeader AS DMG_ROM_HEADER,ByRef info As DMG_ROM_INFO)
	memcpy(VarPtr(info),VarPtr(rawHeader),sizeof(DMG_ROM_HEADER))

	Dim i AS Long,sum AS DWord
	For i=0 To 47
		sum+=rawHeader.NLogo[i]
	Next

	if sum=DMG_NLOGO_SUM Then 
		info.bLogoCheck=TRUE
	Else
		info.bLogoCheck=FALSE
	End If

	memcpy(info.Title,rawHeader.Title,15)
	info.Title[15]=0

	'タイトルが16文字より少ない場合、ゲームIDがタイトルの後ろの方に書かれていることがある。
	if info.Title[10]=&H00 or info.Title[10]=&H20 Then _
		memcpy(info.GameCode,VarPtr(info.Title[11]),4)

	If rawHeader.GBCFlag = &HC0 Then
		info.ConsoleFlag = DMG_CF_GBC	'GBC専用
	Else
		info.ConsoleFlag = DMG_CF_NGB
		if rawHeader.GBCFlag = &H80 Then	info.ConsoleFlag = info.ConsoleFlag Or DMG_CF_GBC
		if rawHeader.SGBFlag <> &H00 Then	info.ConsoleFlag = info.ConsoleFlag Or DMG_CF_SGB
	Endif

	Dim ct AS Byte, mt AS DMG_MBC_TYPE
	ct=rawHeader.CartType

	if ct=0 or ct=8 or ct=09 Then 
		mt=DMG_NO_MBC

	Elseif ct >= &H01 And ct<=&H03 Then
		mt=DMG_MBC1

	Elseif ct >= &H05 And ct<=&H06 Then
		mt=DMG_MBC2

	Elseif ct >= &H0B And ct<=&H0D Then
		mt=DMG_MMM01

	Elseif ct >= &H0F And ct<=&H012 Then
		mt=DMG_MBC3

	Elseif ct >= &H19 And ct<=&H1E Then
		mt=DMG_MBC5

	Elseif ct = &H20 Then
		mt=DMG_MBC6

	Elseif ct = &H22 Then 
		mt=DMG_MBC7

	Elseif ct = &HFC Then
		mt=DMG_POCKET_CAMERA

	Elseif ct = &HFD Then
		mt=DMG_TAMA5

	Elseif ct = &HFE Then
		mt=DMG_HuC3

	Elseif ct = &HFF Then
		mt=DMG_HuC1

	Else
		mt=DMG_MBC_TYPE_UNKNOWN
	End If

	if lstrcmp(info.GameCode,"MENU") = 0 Then
		mt=DMG_GMMC1
	End If

	info.MBCType=mt
'	printf(ex"%02X ::: %s\n",ct,DMG_MBC_TYPE_STR[mt])

	'54h ::: (50h --> 8Mbit) + (04h --> 4Mbit) = 12Mbit = 1.5MB
	info.RomSize = (&H8000 << (rawHeader.RomSize And &H0F))
	if (info.RomSize And &HF0) <> 0 Then
		info.RomSize += &H8000 << ((rawHeader.RomSize>>4) And &H0F)
	End If
	
	Const DMG_SRAM_SIZE_TABLE_MAX = 5
	Dim DMG_SRAM_SIZE_TABLE[DMG_SRAM_SIZE_TABLE_MAX] = [
		&H00000, 	'00h 0KB
		&H00800,	'01h 2KB
		&H02000, 	'02h 8KB
		&H08000, 	'03h 32KB
		&H20000, 	'04h 128KB
		&H10000		'05h 64KB	'なんでやねん
	] AS Long 

	if info.MBCType = DMG_MBC2 Then
		info.SramSize=&H2*1024
	Else
		info.SramSize = DMG_SRAM_SIZE_TABLE[rawHeader.SramSize Mod (DMG_SRAM_SIZE_TABLE_MAX+1)]
	End If

	info.RomVersion = rawHeader.RomVersion
	if info.RomVersion >= &H30 Then
		info.RomVersion = info.RomVersion - &H30
	End If
	

End Sub

Function DMG_GenerateInfoText(ByRef info AS DMG_ROM_INFO) AS BytePtr
	Dim str AS StringClass
	str.allocStr(1024)
	str.cpy(ex"DMG ROM Infomation:\n")

	str.sprintf(ex"  Title    : %s\n", info.Title)

	if info.GameCode[0]<>0 Then str.sprintf(ex"  GameID   : %s\n",info.GameCode)

	str.sprintf(ex"  MBC      : %s [%02X]\n  RomSize  : %d KB\n  SramSize : %d KB\n  Version  : 1.%d\n  CheckSum : %04X\n", _
		DMG_MBC_TYPE_STR[info.MBCType],info.raw.CartType, _
		info.RomSize/1024, _ 
		info.SramSize/1024, _ 
		info.RomVersion, _
		info.raw.CheckSum _
		)

	str.cat(ex"  Contact  : ")
	if info.bLogoCheck=FALSE then 
		str.cat(ex"接触不良 [Contact Failue]\n")
	Else
		str.cat(ex"OK\n")
	End If


	DMG_GenerateInfoText=calloc(str.length())
	str.copyToNewPtr(DMG_GenerateInfoText)
End Function

'Global Checksum計算
Function DMG_CalcSum(rom AS BytePtr,Length AS Long) As Word
	Dim i AS Long
	Dim actualSum=0 AS Word,tmp AS Word

	For i=0 To Length-1
		actualSum += rom[i]
	Next i

	'GlobalChecksumは計算から除外
	actualSum -= rom[&H014E] 
	actualSum -= rom[&H014F] 

	tmp = actualSum>>8 Or actualSum<<8
	DMG_CalcSum=tmp
End Function




